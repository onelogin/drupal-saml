<?php

require_once 'functions.php';

/**
 *  Implements hook_help.
 *  
 *  Displays help and module information.
 *  
 *  @param path  Which path of the site we're using to display help
 *  @param arg   Array that holds the current path as returned from arg() function
 */
function onelogin_saml_help($path, $arg) {
  switch ($path) {
    case "admin/help#onelogin_saml":
      return '<p>'.  t("Allows Drupal to function as a SAML Service Provider. This means that users can authenticate to Drupal (without a username or password) via OneLogin or a third party SAML Identity Provider (IdP)") .'</p>';
      break;
   }
}

/**
 * Implements hook_menu()
 */
function onelogin_saml_menu(){
  $items = array();

  $items['admin/config/people/onelogin_saml'] = array(
    'title' => 'Configure OneLogin SAML',
    'description' => 'This SAML plugin allows you to authenticate Drupal users against OneLogin or a third party SAML Identity Provider (IdP). OneLogin is pre-integrated with thousands of apps and handles all of your SSO needs in the cloud and behind the firewall. OneLogin also offers increased security using YubiKeys or VeriSign VIP Access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onelogin_saml_form'),
    'access arguments' => array('config saml'),
    'file' => 'onelogin_saml.admin.inc',
  );

  $items['admin/config/onelogin_saml'] = array(
    'title' => 'Configure OneLogin SAML',
    'description' => 'Configuration of OneLogin SAML',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onelogin_saml_form'),
    'access arguments' => array('config saml'),
    'weight' => -10,
    'file' => 'onelogin_saml.admin.inc',
  );

  $items['onelogin_saml/sso'] = array(
    'title' => 'SAML SP-Iniiated SSO',
    'page callback' => 'onelogin_saml_sso',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['onelogin_saml/acs'] = array(
    'title' => 'SAML Assertion Consumer Service',
    'page callback' => 'onelogin_saml_acs',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['onelogin_saml/sls'] = array(
    'title' => 'SAML Service Logout Service',
    'page callback' => 'onelogin_saml_sls',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['onelogin_saml/metadata'] = array(
    'title' => 'SAML SP Metadata',
    'page callback' => 'onelogin_saml_metadata',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * * Implements hook_menu_alter()
 *  */
function onelogin_saml_menu_alter(&$items) {
	$items['user/%user/password']['access callback'] = 'onelogin_saml_password_tab_disabled';
}

function onelogin_saml_password_tab_disabled($account) {
	$made_sso_login = isset($_COOKIE['Drupal_visitor_drupal_saml_login']) && $_COOKIE['Drupal_visitor_drupal_saml_login'];
	if ($made_sso_login) {
		// Check if user has the administrator role
		global $user;
		if (in_array('administrator', $user->roles)) {
			$saml_admin = TRUE;
		}
		// If the password tab is disabled in the module settings and the user is NOT an admin, hide the password tab.
		$password_tab_disabled = variable_get('saml_options_password_tab_disabled', FALSE);
		if ($password_tab_disabled && !$saml_admin) {
			return FALSE;
		}
	}
	// In all other cases, show the password tab.
	return TRUE;
}

/**
 * * Implements hook_permission()
 *  */
function onelogin_saml_permission(){
  return array(
    'config saml' => array(
      'title' => t('Configure SAML Authentication'),
      'restricted' => TRUE
    )
  );
}

/**
 * Implements hook_user_logout().
 */
function onelogin_saml_user_logout($account) {
  $enable_slo = variable_get('saml_options_slo', FALSE);
  $made_sso_login = isset($_COOKIE['Drupal_visitor_drupal_saml_login']) && $_COOKIE['Drupal_visitor_drupal_saml_login'];
  if ($enable_slo && $made_sso_login) {
    onelogin_saml_slo();
  } else if ($made_sso_login) {
		session_destroy();
		setcookie('Drupal.visitor.drupal_saml_login', '', 1, '/');
		$saml_logout_link = variable_get('saml_logout_link', '');
		drupal_goto($saml_logout_link);
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function onelogin_saml_form_user_login_block_alter(&$form, &$form_state) {
  _onelogin_saml_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function onelogin_saml_form_user_login_alter(&$form, &$form_state) {
  _onelogin_saml_user_login_form_alter($form, $form_state);
}

function _onelogin_saml_user_login_form_alter(&$form, &$form_state) {
  $showSamlLink = variable_get('saml_options_saml_link', FALSE);

  if ($showSamlLink) {
    // Add a "Log in using SAML" link to the user-login form.
    $items = array();
    //Pass on a destination parameter to OneLogin. The OneLogin ldp will pass it back to us using RelayState
    $items[] = array(
      'data' => l(t('Log in using SAML'), url('onelogin_saml/sso', array('absolute' => true)), array('external' => TRUE),array('query'=>array('destination'=>drupal_get_destination()))), 
      'class' => array('saml-link'),
    );

    $form['onelogin_saml_login_links'] = array(
      '#theme' => 'item_list', 
      '#items' => $items, 
      '#attributes' => array('class' => array('onelogin_saml_login-links')), 
      '#weight' => 1,
    );

    $form['links']['#weight'] = 2;

    $register_link = variable_get('saml_create_new_account', '');
    $reset_pw_link = variable_get('saml_request_new_password', '');

    if (!empty($register_link)) {
      $form['links']['#markup'] =  str_replace(url('user/register', array('absolute' => FALSE)), $register_link, $form['links']['#markup']);
    }
    if (!empty($reset_pw_link)) {
      $form['links']['#markup'] =  str_replace(url('user/password', array('absolute' => FALSE)), $reset_pw_link, $form['links']['#markup']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function onelogin_saml_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id === 'user_profile_form') {
		$made_sso_login = isset($_COOKIE['Drupal_visitor_drupal_saml_login']) && $_COOKIE['Drupal_visitor_drupal_saml_login'];
		if ($made_sso_login) {
			// Check if user has the administrator role
			global $user;
			if (in_array('administrator', $user->roles)) {
				$saml_admin = TRUE;
			}
			// If the disable current password fields setting is set in the module and the user is NOT an admin, hide the fields.
			$current_pass_disabled = variable_get('saml_options_current_pass_disabled', FALSE);
		  if ($current_pass_disabled && !$saml_admin) {
		    // searches the #validate array for the current_pass validation function, and removes it
		    $key = array_search('user_validate_current_pass', $form['#validate']);
		    if ($key !== FALSE) {
		      unset($form['#validate'][$key]);
		    }
		    // hide the current password fields
		    hide($form['account']['pass']);
		    hide($form['account']['current_pass_required_values']);
		    hide($form['account']['current_pass']);
		  }
		}
	}
}



/**
 * Implements hook_requirements().
 */
function onelogin_saml_requirements($phase) {
  if ($phase != 'runtime') {
    return;
  }
  $requirements = array();
  // Check for the PHP OpenSSL library.
  if (!function_exists('openssl_random_pseudo_bytes')) {
    $requirements['onelogin_saml_openssl'] = array(
      'value' => t('Not installed'),
      'severity' => REQUIREMENT_ERROR,
      'description' => t('OneLogin SAML PHP Toolkit requires the use of the <a href="@openssl">Open SSL</a> to handling x509 certificates. see <a href="@php-saml">PHP SAML Toolkit</a> for dependency updates.', array('@openssl' => 'http://php.net/manual/en/book.openssl.php', '@php-saml' => 'https://github.com/onelogin/php-saml#dependences')),
    );
  }
  else {
    $requirements['onelogin_saml_openssl'] = array(
      'value' => t('Installed'),
      'severity' => REQUIREMENT_OK,
    );
  }
  // Check for the PHP Mcrypt library.
  if (!function_exists('mcrypt_module_open')) {
    $requirements['onelogin_saml_mcrypt'] = array(
      'value' => t('Not all features enabled'),
      'severity' => REQUIREMENT_WARNING,
      'description' => t('Install <a href="@openssl">Mcrypt Library</a> and its php driver if you gonna handle encrypted data. (nameID, assertions).', array('@mcrypt' => 'http://php.net/manual/en/book.mcrypt.php')),
    );
  }
  else {
    $requirements['onelogin_saml_mcrypt'] = array(
      'value' => t('Installed'),
      'severity' => REQUIREMENT_OK,
    );
  }
  // Check for the Gettext library.
  if (!function_exists('gettext')) {
    $requirements['onelogin_saml_gettext'] = array(
      'value' => t('Not all features enabled.'),
      'severity' => REQUIREMENT_WARNING,
      'description' => t('Install <a href="@gettext">Gettext Library</a> and its php driver. It handles translations.', array('@gettext' => 'http://php.net/manual/en/book.gettext.php')),
    );
  }
  else {
    $requirements['onelogin_saml_gettext'] = array(
      'value' => t('Installed'),
      'severity' => REQUIREMENT_OK,
    );
  }
  $requirements['onelogin_saml_openssl']['title'] = t('OneLogin SAML, OpenSSL Library');
  $requirements['onelogin_saml_mcrypt']['title'] = t('OneLogin SAML, Mcrypt Library');
  $requirements['onelogin_saml_gettext']['title'] = t('OneLogin SAML, Gettext Library');
  return $requirements;
}

